# -*- coding: utf-8 -*-
"""AI.ipynb

Automatically generated by Colaboratory.


"""

import numpy as np
import pandas as pd
import matplotlib as plt
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report 
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score

#Read Data
data = pd.read_csv('heart_failure_clinical_records_dataset.csv')

print("(Rows, Columns): " + str(data.shape))
print(data.columns)
print(data.nunique(axis=0))

pd.crosstab(data.age,data.target).plot(kind="bar",figsize=(10,6))
plt.title('Heart Disease Frequency for Ages')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

pd.crosstab(data.sex,data.target).plot(kind="bar",figsize=(10,6),color=['blue','#AA1111' ])
plt.title('Heart Disease Frequency for Sex')
plt.xlabel('Sex (0 = Female, 1 = Male)')
plt.xticks(rotation=0)
plt.legend(["Don't Have Disease", "Have Disease"])
plt.ylabel('Frequency')
plt.show()

pd.crosstab(data.smoking,data.target).plot(kind="bar",figsize=(10,6))
plt.title('Heart Disease Frequency for Smokers and Non Smokers')
plt.xlabel('Smoking')
plt.ylabel('Frequency')
plt.show()


subData = data[['platelets','creatinine_phosphokinase','serum_sodium','ejection_fraction']]
sns.pairplot(subData)
plt.show()

X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

x_train, x_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state = 1)
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

model1 = LogisticRegression(random_state=1) 
model1.fit(x_train, y_train) 

y_pred1 = model1.predict(x_test) 
print(classification_report(y_test, y_pred1))


#Confusion Matrix
cm = confusion_matrix(y_test, y_pred1)
print(cm)
accuracy_score(y_test, y_pred1)

'''
Test 
Random patient with following records:
Age: 45
Anaemia: 0
creatinine_phosphokinase: 582
diabetes: 0
ejection_fraction: 14
high_blood_pressure: 0
platelets: 166000
serum_creatinine: 0.8
serum_sodium: 127
sex: 1
smoking: 0
time: 14

'''
print('Risk of patient having a heart disease: 1 = yes, 0 = no')
print(model1.predict(sc.transform([[45,0,582,0,14,0,166000,0.8,127,1,0,14]])))
